AWSTemplateFormatVersion: '2010-09-09'
Description: 'Generative AI Use Cases (GenU) one click deployment'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "GenU Deployment Parameters"
        Parameters:
          - Environment
          - NotificationEmailAddress
          - ModelRegion
          - AdditionalModels
          - RAGEnabled
          - SelfSignUp
          - AllowedSignUpEmailDomains
          - AllowedIpV4AddressRanges
          - AllowedIpV6AddressRanges

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name to use for deployment
  
  NotificationEmailAddress:
    Type: String
    Description: Email address to receive deployment notifications
    AllowedPattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    ConstraintDescription: Must be a valid email address
  
  ModelRegion:
    Type: String
    Default: us-east-1
    AllowedValues: [us-east-1, us-west-2, ap-northeast-1]
    Description: AWS region for Bedrock models

  AdditionalModels:
    Type: String
    Default: us.anthropic.claude-sonnet-4-20250514-v1:0,us.anthropic.claude-opus-4-20250514-v1:0,us.deepseek.r1-v1:0
    Description: Additional models to be added to the deployment (comma separated)

  RAGEnabled:
    Type: String
    AllowedValues: [true, false]
    Default: false
    Description: Enable RAG capabilities with Knowledge Base
  
  SelfSignUp:
    Type: String
    AllowedValues: [true, false]
    Default: false
    Description: 'Enable self-signup functionality (CAUTION Carefully consider when you allow public access)'
  
  AllowedSignUpEmailDomains:
    Type: String
    Default: ""
    Description: Allowed email domains for signup (comma separated)
  
  AllowedIpV4AddressRanges:
    Type: String
    Default: ""
    Description: Allowed IPv4 address ranges for access
  
  AllowedIpV6AddressRanges:
    Type: String
    Default: ""
    Description: Allowed IPv6 address ranges for access

Resources:
  # S3 Bucket for parameter file storage
  ParameterFileStoreBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Sub 'genu-params-${Environment}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # SNS Topic for deployment notifications
  DeploymentNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: GenU Deployment Notifications
      TopicName: !Sub 'Notification-for-${AWS::StackName}'
      KmsMasterKeyId: 'alias/aws/sns'

  # SNS Subscription for email notifications
  DeploymentNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref DeploymentNotificationTopic
      Endpoint: !Ref NotificationEmailAddress

  # IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"

  # IAM Policy for CodeBuild
  CodeBuildServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildServiceRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${GenUDeploymentProject}:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${GenUDeploymentProject}"
          - Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref DeploymentNotificationTopic
          - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !GetAtt ParameterFileStoreBucket.Arn
              - !Sub "${ParameterFileStoreBucket.Arn}/*"
      Roles:
        - !Ref CodeBuildServiceRole

  # CodeBuild Project
  GenUDeploymentProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub 'CodeBuild-for-${AWS::StackName}'
      Description: 'Deploys Generative AI Use Cases'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux-x86_64-standard:5.0
        PrivilegedMode: false
        EnvironmentVariables:
          - Name: Environment
            Value: !Ref Environment
          - Name: ModelRegion
            Value: !Ref ModelRegion
          - Name: AdditionalModels
            Value: !Ref AdditionalModels
          - Name: RAGEnabled
            Value: !Ref RAGEnabled
          - Name: SelfSignUp
            Value: !Ref SelfSignUp
          - Name: AllowedSignUpEmailDomains
            Value: !Ref AllowedSignUpEmailDomains
          - Name: AllowedIpV4AddressRanges
            Value: !Ref AllowedIpV4AddressRanges
          - Name: AllowedIpV6AddressRanges
            Value: !Ref AllowedIpV6AddressRanges
          - Name: SNSTopicArn
            Value: !Ref DeploymentNotificationTopic
          - Name: PARAMETER_BUCKET
            Value: !Ref ParameterFileStoreBucket
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 22
              commands:
                - echo "Starting GenU deployment"
                - aws sns publish --topic-arn ${SNSTopicArn} --subject "GenU Deployment Started" --message "Deployment of GenU has started. You will receive another notification when deployment is complete."
                - git clone https://github.com/aws-samples/generative-ai-use-cases.git
                - cd generative-ai-use-cases
                - npm ci

            pre_build:
              commands:
                - cd $CODEBUILD_SRC_DIR/generative-ai-use-cases
                - cp packages/cdk/parameter.ts packages/cdk/parameter.ts.backup

                # Create and run the parameter update script
                - |
                  cat > update-params.js << 'EOF'
                  const fs = require('fs');

                  // Read the existing cdk.json file
                  const cdkJson = JSON.parse(fs.readFileSync('packages/cdk/cdk.json', 'utf8'));

                  const additionalModelIds = process.env.AdditionalModels ? 
                    process.env.AdditionalModels.split(',').map(id => id.trim()) 
                    : [];

                  const envName = process.env.Environment;
                  const params = {
                    modelRegion: process.env.ModelRegion,
                    modelIds: [...new Set([...additionalModelIds, ...cdkJson.context.modelIds])],
                    ragKnowledgeBaseEnabled: process.env.RAGEnabled === 'true',
                    selfSignUpEnabled: process.env.SelfSignUp === 'true',
                    allowedSignUpEmailDomains: process.env.AllowedSignUpEmailDomains ? process.env.AllowedSignUpEmailDomains.split(',').map(d => d.trim()) : null,
                    allowedIpV4AddressRanges: process.env.AllowedIpV4AddressRanges ? process.env.AllowedIpV4AddressRanges.split(',').map(r => r.trim()) : null,
                    allowedIpV6AddressRanges: process.env.AllowedIpV6AddressRanges ? process.env.AllowedIpV6AddressRanges.split(',').map(r => r.trim()) : null
                  };
  
                  try {
                    let content = fs.readFileSync('packages/cdk/parameter.ts', 'utf8');
                    const envRegex = new RegExp(`(${envName}\\s*:\\s*{)[^}]*(})`, 'g');
                    
                    if (content.match(envRegex)) {
                      const envReplacement = `${envName}: ${JSON.stringify(params, null, 2)}`;
                      const updatedContent = content.replace(envRegex, envReplacement);
                      fs.writeFileSync('packages/cdk/parameter.ts', updatedContent);
                      console.log(`Updated ${envName} environment in parameter.ts`);
                    } else {
                      console.error(`Could not find ${envName} environment in parameter.ts`);
                      process.exit(1);
                    }
                  } catch (error) {
                    console.error('Error:', error);
                    process.exit(1);
                  }
                  EOF
                  
                  node update-params.js
                
                # Upload parameter file to S3
                - |
                  echo "Uploading parameter.ts to S3 bucket"
                  aws s3 cp packages/cdk/parameter.ts s3://${PARAMETER_BUCKET}/${Environment}/parameter.ts

            build:
              commands:
                - cd $CODEBUILD_SRC_DIR/generative-ai-use-cases
                
                # Check if bootstrap is needed
                - |
                  BOOTSTRAP_STACK_NAME="CDKToolkit"
                  BOOTSTRAP_EXISTS=$(aws cloudformation describe-stacks --stack-name $BOOTSTRAP_STACK_NAME 2>&1 || echo "NOT_EXISTS")
                  
                  if [[ $BOOTSTRAP_EXISTS == *"Stack with id $BOOTSTRAP_STACK_NAME does not exist"* ]]; then
                    echo "Running CDK bootstrap..."
                    npx -w packages/cdk cdk bootstrap
                  fi
                
                # Deploy the stack
                - npm run cdk:deploy:quick -- -c env=${Environment}
                
                # Get the application URL
                - cd $CODEBUILD_SRC_DIR/
                - |
                  STACK_NAME=$(aws cloudformation describe-stacks --query "Stacks[?contains(StackName, 'GenerativeAiUseCasesStack${Environment}')].StackName" --output text)
                  APP_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='WebUrl'].OutputValue" --output text)
                  USER_POOL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" --output text)
                  AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                  USER_CREATION_URL="https://${AWS_ACCOUNT_ID}.${AWS_DEFAULT_REGION}.console.aws.amazon.com/cognito/v2/idp/user-pools/${USER_POOL}/user-management/users?region=${AWS_DEFAULT_REGION}"

                  cat << EOF > deployment-info.txt
                  GenU Deployment Completed Successfully!
                  Deployment Time: $(date '+%Y-%m-%d %H:%M:%S')

                  Login URL: ${APP_URL}

                  Important Next Steps:
                  1. Please enable model access on Amazon Bedrock:
                     https://${AWS_ACCOUNT_ID}.${ModelRegion}.console.aws.amazon.com/bedrock/home?region=${ModelRegion}#/modelaccess
                  
                  2. Please create a user in the Cognito User Pool to access the application (if self-signup disabled):
                     ${USER_CREATION_URL}
                     User Registration Guide : https://catalog.workshops.aws/generative-ai-use-cases-jp/ja-JP/disable-self-signup/create-account

                  Configuration:
                  Environment: ${Environment}
                  Model Region: ${ModelRegion}
                  RAG Enabled: ${RAGEnabled}
                  Self-Signup Enabled: ${SelfSignUp}
                  Allowed SignUp Email Domains: ${AllowedSignUpEmailDomains}
                  Allowed IpV4 Address Ranges: ${AllowedIpV4AddressRanges}
                  Allowed IpV6 Address Ranges: ${AllowedIpV6AddressRanges}

                  Stack Details:
                  Stack Name: ${STACK_NAME}
                  Region: ${AWS_DEFAULT_REGION}

                  EOF

            post_build:
              commands:
                - cd $CODEBUILD_SRC_DIR/
                - aws sns publish --topic-arn "${SNSTopicArn}" --subject "GenU Deployment Complete" --message file://deployment-info.txt
                - rm -rf generative-ai-use-cases
          artifacts:
            files:
              - deployment-info.txt
      TimeoutInMinutes: 30

  # Custom Resource to trigger CodeBuild
  DeploymentTrigger:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt TriggerFunction.Arn
      ProjectName: !Ref GenUDeploymentProject
      ServiceTimeout: 600

  # Lambda function for the Custom Resource
  TriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt TriggerFunctionRole.Arn
      Runtime: nodejs20.x
      Timeout: 30
      Code:
        ZipFile: |
          const { CodeBuildClient, StartBuildCommand } = require('@aws-sdk/client-codebuild');
          const response = require('cfn-response');

          exports.handler = async (event, context) => {
            console.log('Event:', JSON.stringify(event, null, 2));
            
            const physicalResourceId = `CodeBuildTrigger-${event.ResourceProperties.ProjectName}`;
            const responseData = {};
            
            try {
              const codebuild = new CodeBuildClient({ 
                region: process.env.AWS_REGION,
                maxAttempts: 3
              });

              if (event.RequestType === 'Create' || event.RequestType === 'Update') {
                const command = new StartBuildCommand({ 
                  projectName: event.ResourceProperties.ProjectName 
                });
                const result = await codebuild.send(command);
                responseData.BuildId = result.build.id;
              }
              
              await response.send(event, context, response.SUCCESS, responseData, physicalResourceId);
            } catch (error) {
              console.error('Error:', error);
              await response.send(event, context, response.FAILED, { Error: error.message }, physicalResourceId);
            }
          };

  # IAM Role for Lambda Trigger Function
  TriggerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: CodeBuildStartPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codebuild:StartBuild
                Resource: !GetAtt GenUDeploymentProject.Arn

  # Lambda function to empty S3 bucket before deletion
  EmptyBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt EmptyBucketFunctionRole.Arn
      Runtime: nodejs20.x
      Timeout: 60
      Code:
        ZipFile: |
          const { S3Client, ListObjectVersionsCommand, DeleteObjectsCommand } = require('@aws-sdk/client-s3');
          const response = require('cfn-response');
          
          exports.handler = async (event, context) => {
            console.log('Event:', JSON.stringify(event, null, 2));
            
            // Execute only when the stack is being deleted
            if (event.RequestType === 'Delete') {
              const bucketName = event.ResourceProperties.BucketName;
              try {
                console.log(`Emptying bucket ${bucketName} before deletion`);
                await emptyBucket(bucketName);
                console.log(`Successfully emptied bucket ${bucketName}`);
                await response.send(event, context, response.SUCCESS, {});
              } catch (error) {
                console.error('Error emptying bucket:', error);
                await response.send(event, context, response.FAILED, { Error: error.message });
              }
            } else {
              // Return success without any action for Create/Update
              await response.send(event, context, response.SUCCESS, {});
            }
          };
          
          async function emptyBucket(bucketName) {
            const s3Client = new S3Client();
            let isTruncated = true;
            let keyMarker;
            let versionIdMarker;
            
            while(isTruncated) {
              // List all objects including versioned objects
              const listCommand = new ListObjectVersionsCommand({
                Bucket: bucketName,
                KeyMarker: keyMarker,
                VersionIdMarker: versionIdMarker
              });
              
              const listResponse = await s3Client.send(listCommand);
              
              const deleteObjects = [];
              
              // Add normal versions to deletion targets
              if (listResponse.Versions && listResponse.Versions.length > 0) {
                for (const version of listResponse.Versions) {
                  deleteObjects.push({
                    Key: version.Key,
                    VersionId: version.VersionId
                  });
                }
              }
              
              // Add delete markers to deletion targets
              if (listResponse.DeleteMarkers && listResponse.DeleteMarkers.length > 0) {
                for (const marker of listResponse.DeleteMarkers) {
                  deleteObjects.push({
                    Key: marker.Key,
                    VersionId: marker.VersionId
                  });
                }
              }
              
              // Delete objects if there are any
              if (deleteObjects.length > 0) {
                const deleteCommand = new DeleteObjectsCommand({
                  Bucket: bucketName,
                  Delete: { Objects: deleteObjects }
                });
                
                await s3Client.send(deleteCommand);
                console.log(`Deleted ${deleteObjects.length} objects/versions from ${bucketName}`);
              }
              
              // Check if there are more pages
              isTruncated = listResponse.IsTruncated;
              if (isTruncated) {
                keyMarker = listResponse.NextKeyMarker;
                versionIdMarker = listResponse.NextVersionIdMarker;
              }
            }
          }

  # IAM Role for the EmptyBucket Lambda function
  EmptyBucketFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: EmptyBucketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !GetAtt ParameterFileStoreBucket.Arn
                  - !Sub "${ParameterFileStoreBucket.Arn}/*"

  # Custom resource to empty the bucket before deletion
  BucketEmptier:
    Type: Custom::BucketEmptier
    Properties:
      ServiceToken: !GetAtt EmptyBucketFunction.Arn
      BucketName: !Ref ParameterFileStoreBucket

Outputs:
  ParameterFileStoreBucketName:
    Description: Name of the S3 bucket storing parameter files
    Value: !Ref ParameterFileStoreBucket
  
  NotificationTopicArn:
    Description: ARN of the SNS topic for deployment notifications
    Value: !Ref DeploymentNotificationTopic
  
  CodeBuildProjectName:
    Description: Name of the CodeBuild project
    Value: !Ref GenUDeploymentProject
  
  CodeBuildLogGroup:
    Description: CloudWatch Logs group for CodeBuild logs
    Value: !Sub '/aws/codebuild/${GenUDeploymentProject}'
  
  DeploymentStatus:
    Description: Deployment status information
    Value: !Sub "Deployment has been initiated. You will receive an email notification at ${NotificationEmailAddress} when the deployment is complete."
